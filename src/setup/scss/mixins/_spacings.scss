@use '../variables';
@use '../functions/strip-unit' as *;
@use './media' as *;

///
/// Creates a set of spacings for the given class
///
/// @param   {string}    $class                              The base class to which the spacing value (e.g. "-10") will be attached
/// @param   {string}    $property                           The CSS property to which the spacing value should be assigned
/// @param   {list}      [$spacings=$spacings]               The CSS property to which the spacing value should be assigned
/// @param   {list}      [$breakpoints=$breakpoints]         The CSS property to which the spacing value should be assigned
///
@mixin spacings($class, $property, $spacings: variables.$spacings, $breakpoints: variables.$breakpoints) {
  @each $spacing in $spacings {
    .#{$class}-#{strip-unit($spacing)} {
      #{$property}: #{$spacing};
    }
  }

  // Loop media queries
  // NOTE: skipped index 1 (xxs) because it creates invalid query selector.
  @for $breakpointIndex from 2 through length($breakpoints) {
    $breakpoint: nth(map-keys($breakpoints), $breakpointIndex);

    @include media($breakpoint) { // Wrapping spacing loop in media() reduces output size
      @for $spacingIndex from 1 through length($spacings) {
        $spacing: nth($spacings, $spacingIndex);

        // Don't create a breakpoint related spacing if 0 $spacing and 0 $breakpoint
        @if $breakpointIndex != 1 and $spacingIndex != 1 {
          // stylelint-disable-next-line max-nesting-depth
          .#{$class}-#{$breakpoint}-#{strip-unit($spacing)} {
            #{$property}: #{$spacing};
          }
        }
      }
    }
  }
}
